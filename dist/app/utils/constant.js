"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HOST_URL = exports.EMPLOYEE = exports.CUSTOM_EMAIL = exports.CANDIDATE = exports.TYPE_LEAVE_REQUEST = exports.TYPE_COMPOFF_REQUEST = exports.TYPE_TICKET_REQUEST = exports.LINK = exports.MODEL_POPULATE = exports.DEFAULT_DOCUMENT_CHECKLIST = exports.DEFAULT_COMPANY = exports.API_3RD = exports.COMMON = exports.VALIDATE_MSG = exports.MSG = void 0;
exports.MSG = {
    mailExpiredLink: 'Link expiration for changing password.',
    groupAddSucess: 'Successfully add group.',
    groupListSucess: 'Successfully list group.',
    groupRequest: 'Successfully send request.',
    groupLeave: 'Successfully leave group.',
    groupJoin: 'Successfully join group.',
    groupInvite: 'Successfully invite member to group.',
    groupAccept: 'Successfully accept member to group.',
    groupDissmiss: 'Successfully dissmiss group.',
    friendAdd: 'Successfully add friend.',
    friendRemove: 'Successfully remove friend.',
    friendRequest: 'Successfully request friend.',
    userInvitation: 'Successfully send invitation.',
    passUpdate: 'Successfully update password.',
};
exports.VALIDATE_MSG = {
    emailValid: 'Please provide a valid email.',
    emailMax: 'Email must be contained the most {max} characters.',
    passRequire: 'Password must be provided.',
    passMin: 'Password must be contained at least {min} characters.',
    firstNameValid: 'Please provide a valid first name.',
    firstNameMax: 'First name must be contained the most {max} characters.',
    groupNameRequire: 'Group name must be provided.',
    groupNameUnique: 'Group name {VALUE} already exists.',
    groupTotalMax: 'Member maximum must be {max}.',
    groupFull: 'Group was fulll.',
    groupNotFound: 'Group not found.',
    groupNotOwner: 'User are not owner of group.',
    groupJoined: 'User already join the group.',
    groupOwnerNotFound: 'Group owner not found.',
    groupNameAlphabet: 'Group name must have an alphabet character',
    groupNotInvited: 'User is not invited yet.',
    userNotFound: 'User does not found.',
    invitorNotFound: 'Invitor not found.',
    invitorNotYourself: 'Invitor can not be yourself.',
    inviteSignupFail: 'Fail to send invitation',
    reportAssignMail: "Email doesn't exist in my system.",
    reportNotToCreator: 'Not allow to assign to creator.',
    reportNotFound: 'Report not found.',
    reviewerValid: "Reviewer doesn't exist in group of report",
};
exports.COMMON = {
    password: '12345678@Ab',
    firstName: 'First Name',
    fbLink: 'https://graph.facebook.com/v2.5/me?fields=email,name,friends&access_token=',
    expiredTime: 1000 * 60 * 5,
    expiredTimeForNewMember: 1000 * 60 * 60 * 24 * 7,
    groupMax: 5,
    defaultEchange: 'USD',
    mileageRate: 1,
    mileageUnit: 'km',
    security: '12345678@Tc',
    passwordSync: '12345678@Sync',
    passwordNewUser: 'Exp2o$20YQz@TeR',
    adminPer: [
        'admin-sa',
        'admin-csa',
        'admin-cga',
        'admin-cla',
        'admin-sb',
        'admin-cb',
    ],
    sort: { updatedAt: -1 },
};
exports.API_3RD = {
    country: {
        url: 'https://restcountries.eu/rest/v2/all',
        method: 'GET',
    },
    state: {
        url: 'https://www.universal-tutorial.com/api/getaccesstoken',
        method: 'GET',
        headers: {
            Accept: 'application/json',
            'api-token': 'mjvVRl50YUIAX3-qTTUMNLi2J6cxkk7_26f33B5Lrc1_0fiuEBkY0AObspdKY_WRIEo',
            'user-email': 'khoa.pham@terralogic.com',
        },
    },
};
exports.DEFAULT_COMPANY = {
    name: 'Company',
    phone: 'Phone',
    address: 'Address',
};
exports.DEFAULT_DOCUMENT_CHECKLIST = [
    {
        type: 'A',
        name: 'Identity Proof',
        data: [
            {
                key: 'aadharCard',
                alias: 'Aadhar Card*',
                value: true,
            },
            {
                key: 'panCard',
                alias: 'PAN Card*',
                value: true,
            },
            {
                key: 'passport',
                alias: 'Passport',
                value: false,
            },
            {
                key: 'drivingLicence',
                alias: 'Driving Licence',
                value: false,
            },
            {
                key: 'voterCard',
                alias: 'Voter Card',
                value: false,
            },
        ],
    },
    {
        type: 'B',
        name: 'Address Proof',
        data: [
            {
                key: 'rentalAgreement',
                alias: 'Rental Agreement',
                value: false,
            },
            {
                key: 'electricityUtilityBills',
                alias: 'Electricity & Utility Bills',
                value: false,
            },
            {
                key: 'telephoneBills',
                alias: 'Telephone Bills',
                value: false,
            },
        ],
    },
    {
        type: 'C',
        name: 'Educational',
        data: [
            {
                key: 'sslc',
                alias: 'SSLC *',
                value: true,
            },
            {
                key: 'intermediateDiploma',
                alias: 'Intermedidate/Diploma*',
                value: true,
            },
            {
                key: 'graduation',
                alias: 'Graduation*',
                value: true,
            },
            {
                key: 'postGraduate',
                alias: 'Post Graduate',
                value: false,
            },
            {
                key: 'phdDoctorate',
                alias: 'PHD/Doctorate',
                value: false,
            },
        ],
    },
    {
        type: 'D',
        name: 'Technical Certifications',
        data: [
            {
                key: 'offerLetter',
                alias: 'Offer letter',
                value: false,
            },
            {
                key: 'appraisalLetter',
                alias: 'Appraisal letter',
                value: false,
            },
            {
                key: 'paysTubs',
                alias: 'Paystubs',
                value: false,
            },
            {
                key: 'form16',
                alias: 'Form 16',
                value: false,
            },
            {
                key: 'relievingLetter',
                alias: 'Relieving Letter',
                value: false,
            },
        ],
    },
];
exports.MODEL_POPULATE = {
    approvalFlow: '-createdAt -updatedAt -company -location',
    appSetting: '-createdAt -updatedAt -company -location',
    comment: '-createdAt -updatedAt',
    company: '-createdAt -updatedAt',
    country: '-createdAt -updatedAt',
    creditCard: '-createdAt -updatedAt -assignEmail -assign -user -location -company',
    currency: '-createdAt -updatedAt',
    customer: '-createdAt -updatedAt -company -location',
    expense: '-createdAt -updatedAt -user -report -creditCard -company -location',
    approvalFlowGroup: '-createdAt -updatedAt -company -location -members',
    location: '-createdAt -updatedAt -company -country',
    log: '-createdAt -updatedAt',
    project: '-createdAt -updatedAt -location -company -customer -members',
    report: '-createdAt -updatedAt -location -company -user -bills -comments -manager -approvalFlow',
    role: '-createdAt -updatedAt',
    tag: '-createdAt -updatedAt -user -company -location',
    type: '-createdAt -updatedAt -company -location',
    history: '-createdAt -updatedAt -company -location -performer',
    user: '-createdAt -updatedAt -roles -manageLocations -password -manager',
    miniUser: '-createdAt -updatedAt -roles -manageLocations -password -manager -location -company',
    userActivity: '-createdAt -updatedAt -company -location -author',
    suiteEdition: '-createdAt -updatedAt',
};
exports.LINK = {
    appStore: 'https://apps.apple.com/us/app/expenso-worldwide-version/id1476274925?ls=1',
    googlePlay: 'https://play.google.com/store/apps/details?id=com.paxinimi.expenso',
    email: 'expenso@paxanimi.ai',
};
exports.TYPE_TICKET_REQUEST = {
    enum: ['OffBoarding'],
    offBoarding: 'OffBoarding',
    // status: ['IN-PROGRESS', 'DRAFT', 'DELETED', 'DONE'],
    statusType: {
        inProgress: 'IN-PROGRESS',
        draft: 'DRAFT',
        completed: 'COMPLETED',
        deleted: 'DELETED',
        done: 'DONE',
        onHold: 'ON-HOLD',
        accepted: 'ACCEPTED',
        rejected: 'REJECTED',
    },
    status: ['IN-PROGRESS', 'DRAFT', 'COMPLETED', 'DELETED', 'DONE', 'WITHDRAW'],
    action: ['ON-HOLD', 'ACCEPTED', 'REJECTED'],
    tabType: {
        myRequests: 'MY-REQUESTS',
        teamRequests: 'TEAM-REQUESTS',
        drafts: 'DRAFTS',
    },
    meetingTimeEnum: [
        '8:00(am) - 9:00(am)',
        '9:00(am) - 10:00(am)',
        '10:00(am) - 11:00(am)',
        '11:00(am) - 12:00(am)',
        '1:00(pm) - 2:00(pm)',
        '2:00(pm) - 3:00(pm)',
        '3:00(pm) - 4:00(pm)',
        '4:00(pm) - 5:00(pm)',
    ],
};
exports.TYPE_COMPOFF_REQUEST = {
    enum: ['Compoff'],
    compoff: 'Compoff',
    statusType: {
        inProgress: 'IN-PROGRESS',
        inProgressNext: 'IN-PROGRESS-NEXT',
        draft: 'DRAFTS',
        completed: 'COMPLETED',
        deleted: 'DELETED',
        done: 'DONE',
        onHold: 'ON-HOLD',
        accepted: 'ACCEPTED',
        rejected: 'REJECTED',
    },
    status: [
        'IN-PROGRESS',
        'IN-PROGRESS-NEXT',
        'DRAFTS',
        'COMPLETED',
        'DELETED',
        'DONE',
    ],
    action: [
        'IN-PROGRESS',
        'IN-PROGRESS-NEXT',
        'ON-HOLD',
        'ACCEPTED',
        'REJECTED',
    ],
    tabType: {
        myRequests: 'MY-REQUESTS',
        teamRequests: 'TEAM-REQUESTS',
        drafts: 'DRAFTS',
    },
};
exports.TYPE_LEAVE_REQUEST = {
    enum: ['Leave'],
    leave: 'Leave',
    statusType: {
        inProgress: 'IN-PROGRESS',
        draft: 'DRAFTS',
        completed: 'COMPLETED',
        deleted: 'DELETED',
        done: 'DONE',
        onHold: 'ON-HOLD',
        accepted: 'ACCEPTED',
        rejected: 'REJECTED',
    },
    status: ['IN-PROGRESS', 'DRAFTS', 'COMPLETED', 'DELETED', 'DONE'],
    action: ['IN-PROGRESS', 'ON-HOLD', 'ACCEPTED', 'REJECTED'],
    tabType: {
        myRequests: 'MY-REQUESTS',
        teamRequests: 'TEAM-REQUESTS',
        drafts: 'DRAFTS',
    },
};
exports.CANDIDATE = {
    enum: [
        'DRAFT',
        'SENT-PROVISIONAL-OFFER',
        'PENDING-BACKGROUND-CHECK',
        'ELIGIBLE-CANDIDATE',
        'INELIGIBLE-CANDIDATE',
        'ACCEPT-PROVISIONAL-OFFER',
        'RENEGOTIATE-PROVISONAL-OFFER',
        'DISCARDED-PROVISONAL-OFFER',
        'RECEIVED-SUBMITTED-DOCUMENTS',
        'PENDING-APPROVAL-FINAL-OFFER',
        'APPROVED-FINAL-OFFER',
        'REJECT-FINAL-OFFER-HR',
        'REJECT-FINAL-OFFER-CANDIDATE',
        'SENT-FINAL-OFFER',
        'ACCEPT-FINAL-OFFER',
        'FINAL-OFFER-DRAFT',
        'CLOSE',
    ],
    QUESTION_TYPE_ENUM: ['text', 'select', 'radio', 'checkbox'],
};
exports.CUSTOM_EMAIL = {
    APPLY_TO_ENUM: ['any', 'condition'],
    SENDING_DATE_ENUM: ['now', 'before', 'after'],
    TRIGGER_EVENT_ENUM: [
        '',
        'SENT-PROVISIONAL-OFFER',
        'ELIGIBLE-CANDIDATE',
        'INELIGIBLE-CANDIDATE',
        'ACCEPT-PROVISIONAL-OFFER',
        'RENEGOTIATE-PROVISONAL-OFFER',
        'DISCARDED-PROVISONAL-OFFER',
        'RECEIVED-SUBMITTED-DOCUMENTS',
        'APPROVED-FINAL-OFFER',
        'REJECT-FINAL-OFFER-HR',
        'REJECT-FINAL-OFFER-CANDIDATE',
        'SENT-FINAL-OFFER',
        'ACCEPT-FINAL-OFFER',
    ],
    DEFAULT_TRIGGER_EVENT: [
        {
            name: 'Provisonal offer send to candidate',
            value: 'SENT-PROVISIONAL-OFFER',
        },
        {
            name: 'HR Manager approve final offer',
            value: 'APPROVED-FINAL-OFFER',
        },
        {
            name: 'Candidate accept final offer',
            value: 'ACCEPT-FINAL-OFFER',
        },
        {
            name: 'Ineligible candidate for offer',
            value: 'INELIGIBLE-CANDIDATE',
        },
        {
            name: 'Renegotiate provisonal offer',
            value: 'RENEGOTIATE-PROVISONAL-OFFER',
        },
    ],
    CONDITION_TYPE: [
        {
            key: 'department',
            screenName: 'Department',
        },
        {
            key: 'location',
            screenName: 'Location',
        },
        {
            key: 'title',
            screenName: 'Title',
        },
        {
            key: 'employee_type',
            screenName: 'Employee Type',
        },
    ],
    LIST_AUTO_FIELD: [
        '@employee_generalInfo_firstName',
        '@employee_generalInfo_lastName',
        '@employee_generalInfo_personalEmail',
        '@employee_generalInfo_workEmail',
        '@employee_generalInfo_workNumber',
        '@employee_manager_generalInfo_firstName',
        '@employee_manager_generalInfo_lastName',
        '@employee_manager_generalInfo_workEmail',
        '@employee_manager_generalInfo_workNumber',
        '@employee_manager_generalInfo_personalEmail',
        '@employee_employeeId',
        '@candidate_ticketID',
        '@candidate_noticePeriod',
        '@candidate_dateOfJoining',
        '@candidate_fullName',
        '@candidate_privateEmail',
        '@candidate_workEmail',
        '@candidate_position',
        '@candidate_reportingManager_generalInfo_firstName',
        '@candidate_reportingManager_generalInfo_lastName',
        '@company_suiteEdition',
        '@company_name',
        '@company_phone',
        '@company_contactEmail',
        '@company_website',
        '@company_headQuarterAddress_address',
        '@company_headQuarterAddress_state',
        '@company_headQuarterAddress_zipCode',
        '@company_headQuarterAddress_country',
        '@company_legalAddress_address',
        '@company_legalAddress_state',
        '@company_legalAddress_zipCode',
        '@company_legalAddress_country',
        '@company_dba',
        '@company_ein',
        '@title_name',
        '@department_name',
        '@employeeType_name',
    ],
};
exports.EMPLOYEE = {
    relationshipEnum: [
        'Father',
        'Mother',
        'Son',
        'Daughter',
        'Spouse',
        'Friend',
        'Other',
    ],
};
exports.HOST_URL = 'http://stghrms.paxanimi.ai';
//# sourceMappingURL=constant.js.map